name: Release Process

on:
  push:
    tags:
      - 'v*'

jobs:
  update-version:
    runs-on: macos-15
    permissions:
      contents: write
    outputs:
      release_branch: ${{ steps.set-branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create release branch
        id: set-branch
        run: |
          # Create a new branch from the tag
          BRANCH_NAME="release/${GITHUB_REF#refs/tags/}"
          git checkout -b $BRANCH_NAME
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Update Info.plist
        run: |
          # Update both version strings
          plutil -replace CFBundleShortVersionString -string $VERSION Butler/Info.plist
          plutil -replace CFBundleVersion -string $VERSION Butler/Info.plist
          
      - name: Commit and push release branch
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Butler/Info.plist
          git commit -m "Bump version to $VERSION in release branch"
          git push --set-upstream origin $BRANCH_NAME

  build:
    needs: update-version
    runs-on: macos-15
    permissions:
      contents: write
    
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.update-version.outputs.release_branch }}

      - name: Select and Verify Xcode 16.2
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app
          xcodebuild -version
          echo "Using Xcode at: $(xcode-select -p)"
          
          # Verify we're using Xcode 16.2
          XCODE_VERSION=$(xcodebuild -version | head -n 1 | awk '{ print $2 }')
          if [ "$XCODE_VERSION" != "16.2.0" ]; then
            echo "Error: Expected Xcode 16.2.0 but got $XCODE_VERSION"
            exit 1
          fi

      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build and archive
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_DEVELOPER_PASSWORD: ${{ secrets.APPLE_DEVELOPER_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          # Build the app (with detailed logging)
          xcodebuild -project Butler.xcodeproj \
            -scheme Butler \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Butler.xcarchive \
            archive \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_IDENTITY="Developer ID Application" \
            CODE_SIGN_STYLE=Manual \
            -verbose

          # Export archive to app (with detailed logging)
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Butler.xcarchive \
            -exportPath $RUNNER_TEMP/export \
            -exportOptionsPlist ExportOptions.plist \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_IDENTITY="Developer ID Application" \
            -verbose

          # Create DMG
          hdiutil create -volname "ButlerAI" -srcfolder $RUNNER_TEMP/export/Butler.app -ov -format UDZO $RUNNER_TEMP/ButlerAI.dmg

          # Sign and notarize DMG
          xcrun notarytool submit $RUNNER_TEMP/ButlerAI.dmg --apple-id "$APPLE_DEVELOPER_ID" --password "$APPLE_DEVELOPER_PASSWORD" --team-id "$(security find-identity -v -p codesigning | grep "Developer ID" | cut -d '"' -f 2 | cut -d '(' -f 2 | cut -d ')' -f 1)" --wait
          xcrun stapler staple $RUNNER_TEMP/ButlerAI.dmg

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ runner.temp }}/ButlerAI.dmg
          asset_name: ButlerAI.dmg
          asset_content_type: application/x-apple-diskimage
